<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>胡少的个人博客</title>
  
  <subtitle>博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hushao96.github.io/"/>
  <updated>2018-06-12T15:11:41.588Z</updated>
  <id>https://hushao96.github.io/</id>
  
  <author>
    <name>胡少</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot2.x+Spring Data Jpa整合简书</title>
    <link href="https://hushao96.github.io/2018/06/11/SpringBoot2-x-Spring-Data-Jpa%E6%95%B4%E5%90%88%E7%AE%80%E4%B9%A6/"/>
    <id>https://hushao96.github.io/2018/06/11/SpringBoot2-x-Spring-Data-Jpa整合简书/</id>
    <published>2018-06-10T17:05:33.000Z</published>
    <updated>2018-06-12T15:11:41.588Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SpringDataJpa由Spring基于Hibernate开发的一个JPA框架。可以极大的简化JPA的写法，可以在几乎不用写实现的情况下，实现对数据的访问和操作。与SpringBoot整合更是锦上添花-下面我将讲解其用法。"><a href="#SpringDataJpa由Spring基于Hibernate开发的一个JPA框架。可以极大的简化JPA的写法，可以在几乎不用写实现的情况下，实现对数据的访问和操作。与SpringBoot整合更是锦上添花-下面我将讲解其用法。" class="headerlink" title="SpringDataJpa由Spring基于Hibernate开发的一个JPA框架。可以极大的简化JPA的写法，可以在几乎不用写实现的情况下，实现对数据的访问和操作。与SpringBoot整合更是锦上添花,下面我将讲解其用法。"></a>SpringDataJpa由Spring基于Hibernate开发的一个JPA框架。可以极大的简化JPA的写法，可以在几乎不用写实现的情况下，实现对数据的访问和操作。与SpringBoot整合更是锦上添花,下面我将讲解其用法。</h3><a id="more"></a> <h3 id="1-实体类"><a href="#1-实体类" class="headerlink" title="1. 实体类"></a>1. 实体类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">@Entity</span><br><span class="line">@Table(name = &quot;t_accountinfo&quot;)</span><br><span class="line">public class User &#123;</span><br><span class="line"></span><br><span class="line">    @Id</span><br><span class="line">    @GeneratedValue(strategy = GenerationType.IDENTITY)</span><br><span class="line">    private Long id;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    @NotNull(message = &quot;用户名不能为空&quot;)</span><br><span class="line">    @Column(length = 64,nullable = false,unique = true)</span><br><span class="line">    private String username;</span><br><span class="line"></span><br><span class="line">    @NotNull(message = &quot;密码不能为空&quot;)</span><br><span class="line">    private String password;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    @Lob</span><br><span class="line">    private String image;</span><br><span class="line"></span><br><span class="line">    @Email(message = &quot;邮箱格式错误&quot;)</span><br><span class="line">    private String email;</span><br><span class="line"></span><br><span class="line">    @Size(max=11,min=11,message=&quot;你所输入手机号不是１１位&quot;)</span><br><span class="line">    private　String phone;</span><br><span class="line"></span><br><span class="line">    @CreationTimestamp</span><br><span class="line">    private Timestamp createTime;</span><br><span class="line"></span><br><span class="line">    @UpdateTimestamp</span><br><span class="line">    private Timestamp updateTime;</span><br><span class="line">    </span><br><span class="line">   //此处 get() set()省略。。。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-＠Entity-代表这是一个实体Bean-Table-其中的name属性代表的是所映射数据库表的名字-如果没有-Table，默认生成类名对应的表。如：User（类）-gt-user-表-HuUser（类）-gt-hu-user-表"><a href="#1-＠Entity-代表这是一个实体Bean-Table-其中的name属性代表的是所映射数据库表的名字-如果没有-Table，默认生成类名对应的表。如：User（类）-gt-user-表-HuUser（类）-gt-hu-user-表" class="headerlink" title="1. ＠Entity:代表这是一个实体Bean;@Table():其中的name属性代表的是所映射数据库表的名字,如果没有@Table，默认生成类名对应的表。如：User（类）-&gt;user(表);　HuUser（类）-&gt;hu_user(表)"></a>1. ＠Entity:代表这是一个实体Bean;@Table():其中的name属性代表的是所映射数据库表的名字,如果没有@Table，默认生成类名对应的表。如：User（类）-&gt;user(表);　HuUser（类）-&gt;hu_user(表)</h4><h4 id="2-＠Id-代表这是一个主键；"><a href="#2-＠Id-代表这是一个主键；" class="headerlink" title="2. ＠Id:代表这是一个主键；"></a>2. ＠Id:代表这是一个主键；</h4><h4 id="3-GeneratedValue-增长策略：strategy属性其中有四个用法"><a href="#3-GeneratedValue-增长策略：strategy属性其中有四个用法" class="headerlink" title="3. @GeneratedValue()增长策略：strategy属性其中有四个用法:"></a>3. @GeneratedValue()增长策略：strategy属性其中有四个用法:</h4><ul><li>TABLE：使用一个特定的数据库表格来保存主键。</li><li>SEQUENCE：根据底层数据库的序列来生成主键，条件是数据库支持序列。 </li><li>IDENTITY：主键由数据库自动生成（主要是自动增长型）</li><li>AUTO：主键由程序控制。　　</li><li>如果你想字符串生成uuid可自定义生成策略：@GenericGenerator(name = “uuid”,strategy = “uuid”)@GeneratedValue(generator = “uuid”)  </li></ul><h4 id="4-Column-代表字段映射的一些属性"><a href="#4-Column-代表字段映射的一些属性" class="headerlink" title="4.@Column()代表字段映射的一些属性"></a>4.@Column()代表字段映射的一些属性</h4><ul><li>lenth:表示该字段的长度，默认为２５５</li><li>nullable:表示该字段是否为空，默认为ture;注解使用@NotNull: message：为空时抛出的错误信息</li><li>unqique:表示该字段是否唯一；默认为false;</li><li>其他的没用过！！！</li></ul><h4 id="5-字段约束"><a href="#5-字段约束" class="headerlink" title="5. 字段约束"></a>5. 字段约束</h4><ul><li>＠Size表示字段一些约束：mix：最小长度；max：最大长度，message:表示违反约束抛出的错误信息</li><li>＠Enail:表示该字段格式必须为邮箱格式，其中message表示不满足时抛出的错误信息</li><li>@Pattern：regexp属性:正则表达式，message属性:不满足时抛出的错误信息</li></ul><h4 id="6-＠Lob-该字段映射表中该字段类型为text属性"><a href="#6-＠Lob-该字段映射表中该字段类型为text属性" class="headerlink" title="6. ＠Lob:该字段映射表中该字段类型为text属性"></a>6. ＠Lob:该字段映射表中该字段类型为text属性</h4><h4 id="7-CreationTimestamp：表示插入数据自动生成时间-UpdateTimestamp-更新数据时生成当前时间"><a href="#7-CreationTimestamp：表示插入数据自动生成时间-UpdateTimestamp-更新数据时生成当前时间" class="headerlink" title="7. @CreationTimestamp：表示插入数据自动生成时间; @UpdateTimestamp:更新数据时生成当前时间;"></a>7. @CreationTimestamp：表示插入数据自动生成时间; @UpdateTimestamp:更新数据时生成当前时间;</h4><h4 id="8-OneToMany一对多，-ManyToOne多对一"><a href="#8-OneToMany一对多，-ManyToOne多对一" class="headerlink" title="8. @OneToMany一对多，@ManyToOne多对一"></a>8. @OneToMany一对多，@ManyToOne多对一</h4><ul><li>mappedBy:用于双向关联时使用，值为放弃维护的表名，否则会引起数据不一致的问题</li><li>fetch:可取的值有FetchType.EAGER:即时加载；FetchType.LAZY：懒加载;@OneToMany中默认为懒加载</li><li>cascade：CascadeType.PERSIST（级联新建）、CascadeType.REMOVE（级联删除）、CascadeType.REFRESH（级联刷新）、CascadeType.MERGE（级联更新）、CascadeType.ALL（选择全部）</li></ul><h4 id="９-ManyToOne多对一"><a href="#９-ManyToOne多对一" class="headerlink" title="９. @ManyToOne多对一"></a>９. @ManyToOne多对一</h4><ul><li>optional 属性是定义该关联类对是否必须存在，值为false时，关联类双方都必须存在，如果关系被维护端不存在，查询的结果为null。 值为true 时, 关系被维护端可以不存在，查询的结果仍然会返回关系维护端，在关系维护端中指向关系被维护端的属性为null。 optional 属性的默认值是true。</li><li>其他和 @OneToMany一样，注意：fetch默认为即时加载</li></ul><h4 id="9-ManyToMany多对多"><a href="#9-ManyToMany多对多" class="headerlink" title="9. @ManyToMany多对多"></a>9. @ManyToMany多对多</h4><ul><li>fetch默认为懒加载</li><li>定义多对多时的其他配置：实例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//name:第三张表的表名；</span><br><span class="line">joinColumns和inverseJoinColumns：:name:字段名;referencedColumnName:绑定哪个字段名，nullable：是否可以为空；</span><br><span class="line"> @JoinTable(name = &quot;user_role&quot;,</span><br><span class="line">            joinColumns = @JoinColumn(name = &quot;user_id&quot;,referencedColumnName = &quot;Id&quot;,nullable = false),</span><br><span class="line">            inverseJoinColumns =@JoinColumn(name = &quot;role_id&quot;,referencedColumnName = &quot;id&quot;,nullable = false))</span><br></pre></td></tr></table></figure><h4 id="10-其他"><a href="#10-其他" class="headerlink" title="10. 其他"></a>10. 其他</h4><ul><li>@NotNull:不能为空 message：为空时抛出的错误信息</li></ul><h3 id="２-接口"><a href="#２-接口" class="headerlink" title="２. 接口"></a>２. 接口</h3><p>这里我就讲解我所用的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extends JpaRepository&lt;User,Long&gt;</span><br></pre></td></tr></table></figure><p> <strong>定义一个接口继承此接口</strong> &lt;User,Long&gt;第一个值为映射表中的类名，第二个值为此类的Id类型<br> <strong>默认的方法:</strong> </p><ul><li>save:新增或修改一条数据;saveAll：新增或修改多条数据； <strong>注意：当传入的数据没有id时，会是修改数据</strong> </li><li>delete:删除一条数据；deleteById:根据id删除数据；</li><li>findById:根据id查询信息，返回的是Optional&lt;&gt;类型;</li><li>finAll：查询所有信息；返回类型一个是List，一个是Page：分页的类型</li><li>还有其他的方法暂时没研究；　　</li></ul><p>当然这些往往不够，还有一些自定义的方法:</p><ul><li>关键字—————–样例————————–对应sql</li><li>And——————findByUsername——————…where username=?1</li><li>Or——————-findByUsernameOrAge————-…where username=?! or age=?2</li><li>Like—————–findByUsernameLike————-…where username like ?1</li><li>Between————–findByAgeBetween—————…where age between 1? and ?2</li><li>LessThan————–findByAgeLessThan————-…where age&lt;?1</li><li>LessThanEqual————-findByAgeLessThanEqual————-…where age&lt;=?1</li><li>GreaterThan—————findByAgeGreaterThan—————…where age&gt;?1</li><li>GreaterThanEqual————-findByAgeGreaterThanEqual————-…where age&gt;=?1</li></ul><p> <strong>findDistinct：去重;</strong></p><p> <strong>其他：还有其他关键字我就不写了，可以去查；</strong> </p><h3 id="3-Query"><a href="#3-Query" class="headerlink" title="3. @Query"></a>3. @Query</h3><p>如果上面那些还不能达到你的要求，那就是用@Query</p><ul><li>属性:nativeQuery = true时　代表可以写原生的sql语句了。。对，没错原生的，不是hql语句；例子：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Query(value = &quot;SELECT c.id,c.name,c.create_time,c.update_time,c.comment FROM aimi_store.user_role AS a JOIN aimi_store.aimi_user AS  b ON a.user_id=b.id JOIN aimi_store.`role` AS  c ON a.role_id=c.id WHERE b.id=?1&quot;,nativeQuery = true)</span><br><span class="line">List&lt;Role&gt; listRoleByUser(String Id);</span><br></pre></td></tr></table></figure><p> <strong>没错，任何sql语句都可以写，所以，，可以和mybatis一较高下来了;</strong><br>还有其他很多功能我就不一一说出来了，你们可以看文档；</p><h3 id="1-总结"><a href="#1-总结" class="headerlink" title="1. 总结"></a>1. 总结</h3><p>Spring Data Jpa　是真的太强大了，不仅有默认的基本方法，分页简单；还可以写原生sql语句。和SpringBoot整合，简直完美！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;SpringDataJpa由Spring基于Hibernate开发的一个JPA框架。可以极大的简化JPA的写法，可以在几乎不用写实现的情况下，实现对数据的访问和操作。与SpringBoot整合更是锦上添花-下面我将讲解其用法。&quot;&gt;&lt;a href=&quot;#SpringDataJpa由Spring基于Hibernate开发的一个JPA框架。可以极大的简化JPA的写法，可以在几乎不用写实现的情况下，实现对数据的访问和操作。与SpringBoot整合更是锦上添花-下面我将讲解其用法。&quot; class=&quot;headerlink&quot; title=&quot;SpringDataJpa由Spring基于Hibernate开发的一个JPA框架。可以极大的简化JPA的写法，可以在几乎不用写实现的情况下，实现对数据的访问和操作。与SpringBoot整合更是锦上添花,下面我将讲解其用法。&quot;&gt;&lt;/a&gt;SpringDataJpa由Spring基于Hibernate开发的一个JPA框架。可以极大的简化JPA的写法，可以在几乎不用写实现的情况下，实现对数据的访问和操作。与SpringBoot整合更是锦上添花,下面我将讲解其用法。&lt;/h3&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="https://hushao96.github.io/categories/JavaWeb/"/>
    
    
      <category term="SpringBoot" scheme="https://hushao96.github.io/tags/SpringBoot/"/>
    
      <category term="SpringDataJpa" scheme="https://hushao96.github.io/tags/SpringDataJpa/"/>
    
  </entry>
  
  <entry>
    <title>Java基础回顾篇以及面试要点！</title>
    <link href="https://hushao96.github.io/2018/06/07/Java%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE%E7%AF%87%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E8%A6%81%E7%82%B9%EF%BC%81/"/>
    <id>https://hushao96.github.io/2018/06/07/Java基础回顾篇以及面试要点！/</id>
    <published>2018-06-07T09:35:03.000Z</published>
    <updated>2018-06-07T04:00:28.000Z</updated>
    
    <content type="html"><![CDATA[<p> <strong>Java基础很重要，他会让你在写项目的时候避免坑以及提高代码质量等等，本人忽视了这点，所以这次特也写篇博客牢固Java知识要点，好了，话不多说，开始吧！</strong></p><a id="more"></a><h4 id="1-Java编译和运行过程"><a href="#1-Java编译和运行过程" class="headerlink" title="1. Java编译和运行过程"></a>1. <strong>Java编译和运行过程</strong></h4><ul><li>源文件由编译器编译成字节码文件（ByteCode）</li><li>字节码有Java虚拟机解释运行</li></ul><h4 id="2-Java面向对象四个基本特性"><a href="#2-Java面向对象四个基本特性" class="headerlink" title="2. Java面向对象四个基本特性"></a>2. <strong>Java面向对象四个基本特性</strong></h4><ul><li>抽象:把具有相同属性和行为的对象被抽象成类</li><li>封装：把对象封装成高度自治和相对封闭的个体，对象属性由自己读取和改变</li><li>继承：把已经存在的类已定义的内容作为自己的，并可加入新内容或修改原来的方法</li><li>多态：不同类的对象对同一消息做出不同反应</li></ul><h4 id="3-Java中对象的生命周期"><a href="#3-Java中对象的生命周期" class="headerlink" title="3.  Java中对象的生命周期"></a>3.  <strong>Java中对象的生命周期</strong></h4><ul><li>创建阶段–&gt;应用阶段–&gt;不可见阶段–&gt;不可达阶段–&gt;收集阶段–&gt;终结阶段–&gt;对象空间重新分配阶段</li></ul><h4 id="4-Java-8种数据类型"><a href="#4-Java-8种数据类型" class="headerlink" title="4.  Java 8种数据类型"></a>4.  <strong>Java 8种数据类型</strong></h4><ul><li>byte：1个字节</li><li>short2个字节</li><li>int：4个字节</li><li>long：8个字节</li><li>float：4个字节</li><li>duble：8个字节</li><li>boolean：2个字节</li><li>char ：1位</li></ul><h4 id="5-与equals区别"><a href="#5-与equals区别" class="headerlink" title="5.  ==与equals区别"></a>5.  <strong>==与equals区别</strong></h4><ul><li>==：比较两个对象的地址</li><li>equals：比较两个对象内容</li></ul><h4 id="6-String，StringBuffer，StringBuilder区别"><a href="#6-String，StringBuffer，StringBuilder区别" class="headerlink" title="6.  String，StringBuffer，StringBuilder区别"></a>6.  <strong>String，StringBuffer，StringBuilder区别</strong></h4><ul><li>String：内容不可变，底层使用的是不可变的字符数组（<code>private final char value[]</code>）</li><li>StringBuffer:内容可变，底层使用的是可变字符数组（<code>char [] vale</code>），线程安全</li><li>StringBuilder:内容可变，底层使用的是可变字符数组（<code>char [] vale</code>），线程不安全，效率相对于StringBuffer高些。</li></ul><h4 id="7-ArrayList与LinkedList区别"><a href="#7-ArrayList与LinkedList区别" class="headerlink" title="7.  ArrayList与LinkedList区别"></a>7.  <strong>ArrayList与LinkedList区别</strong></h4><ul><li>ArrayList：底层使用的是数组实现，查询用ArrayList，因为LinkedList需要移动指针</li><li>LinkedList：底层使用的是链表，更新删除用LinkedList，因为ArrayList需要移动数据</li></ul><h4 id="8-HashMap和HashTable的区别"><a href="#8-HashMap和HashTable的区别" class="headerlink" title="8.  HashMap和HashTable的区别"></a>8.  <strong>HashMap和HashTable的区别</strong></h4><ul><li>相同点:都是Key-value的数据</li><li>HashMap：key和value可以为null，线程不安全，效率高</li><li>hashtable：Key和value不可为null，线程安全，效率低</li><li>想线程安全，效率高使用ConcurrentHashMap：把整个Map分成N个Segment（类似HashTable）</li></ul><h4 id="9-借口-interface-和抽象类-abstract-class"><a href="#9-借口-interface-和抽象类-abstract-class" class="headerlink" title="9.  借口(interface)和抽象类(abstract class)"></a>9.  <strong>借口(interface)和抽象类(abstract class)</strong></h4><ul><li>抽象类中可有抽象方法和具体方法，接口中的方法都是抽象方法（注意：JDK1.8后接口添加了一种默认方法-default和静态方法。）</li></ul><p>静态方法：默认方法允许接口方法定义默认实现，而所有子类都将拥有该方法及实现。</p><p>静态方法：由于它是静态的，所以由接口定义的静态方法可以独立于任何对象被调用。因此，调用静态方法不需要实现接口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public interface TestInter &#123;</span><br><span class="line">    default String getDefault()&#123;</span><br><span class="line">        return &quot;default&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    static String getStatic()&#123;</span><br><span class="line">        return &quot;static&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>类可以实现（implements）多个接口但只能继承（extends）一个抽象类</li><li>接口中的成员都是public ；抽象类的成员可以是private，protected，public（注意：JDK1.9之后：接口支持私有化）</li></ul><h4 id="10-字符流和字节流"><a href="#10-字符流和字节流" class="headerlink" title="10.  字符流和字节流"></a>10.  <strong>字符流和字节流</strong></h4><ul><li>字符流处理的基本单位是字符（Java中的字符是16位的），输入流以Reader为基础，输出流以Writer为基础，常用读取字符数据；</li><li>字节流的基本单位是字节（Java中的字节是8位的），输入流以 InputStream为基础，输出流以 OutputStream为基础，常用读取二进制文件也就是对文件的操作；</li></ul><h4 id="11-Java线程"><a href="#11-Java线程" class="headerlink" title="11.  Java线程"></a>11.  <strong>Java线程</strong></h4><ul><li>Java多线程的实现：继承Thread类重写run函数，实现Runnable接口</li><li>线程池作用：不需要每次去创建和销毁线程了，节约资源和相应时间更快</li></ul><h4 id="12-Sleep和wait"><a href="#12-Sleep和wait" class="headerlink" title="12.  Sleep和wait"></a>12.  <strong>Sleep和wait</strong></h4><ul><li>Sleep()：是线程Thread类的静态方法，调用此方法会让当前线程暂停到指定时间，将执行机会给其他线程，但对象锁依然保持，结束后自动回复</li><li>wait():调用此方法会导致当前线程放弃对象锁</li></ul><h4 id="13-线程与进程的区别"><a href="#13-线程与进程的区别" class="headerlink" title="13.  线程与进程的区别"></a>13.  <strong>线程与进程的区别</strong></h4><ul><li>进程是资源的分配和调度的一个独立单元，线程是CPU调度的基本单位</li><li>同一进程中可以包含多个线程，并且线程共享整个进程资源</li></ul><h4 id="14-Java设计模式（举例几个）"><a href="#14-Java设计模式（举例几个）" class="headerlink" title="14.  Java设计模式（举例几个）"></a>14.  <strong>Java设计模式（举例几个）</strong></h4><ul><li>单例模式：①构造方法私有化，让除了自己类中能创建外其他地方都不能创建②在自己类中创建单实例③提供一个方法获取该实例对象</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class Single&#123;    </span><br><span class="line">  private static Single single=null;    //声明静态的单例对象的变量    </span><br><span class="line">  private Singleton()&#123;&#125;    //私有构造方法     </span><br><span class="line">  </span><br><span class="line">　//外部通过此方法可以获取对象      </span><br><span class="line">  public　synchronized static Singlet getSingle()&#123;</span><br><span class="line">    if(single == null)&#123;       </span><br><span class="line">　　     single=new Single()            </span><br><span class="line">    &#125;      </span><br><span class="line">    return single;    </span><br><span class="line">  &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>工厂模式：对象的创建交给工厂来创建,SpringIOC就是工厂模式？</li><li>代理模式：Spring的AOP就是使用了动态代理。</li></ul><h4 id="15-MVC开发模式"><a href="#15-MVC开发模式" class="headerlink" title="15.  MVC开发模式"></a>15.  <strong>MVC开发模式</strong></h4><ul><li>M    model模型层 应用程序中用于处理数据逻辑的部分</li><li>V    view 视图层 应用程序中用于数据展示的部分</li><li>C    controller 控制层应用程序中用于处理用户请求的部分\</li></ul><h4 id="16-Spring"><a href="#16-Spring" class="headerlink" title="16.  Spring"></a>16.  <strong>Spring</strong></h4><ul><li><strong>IOC(控制反转)</strong><br><strong>理解:</strong> 对组件的对象进行控制权转移，从程序代码本身转移到外部容器，由容器来创建对象并管理对象之间的依赖关系；<br><strong>实现:</strong> 通过反射创建实例<ul><li><strong>AOP(面向切面编程)</strong><br><strong>理解:</strong> 将程序中的交叉业务逻辑（安全，日志，事物），封装成一个切面，然后注入到目标对象（具体业务逻辑）中去，完善依赖注入;<br><strong>实现:</strong> 动态代理，JDK动态代理</li></ul></li></ul><h4 id="17-SpringMVC-原理"><a href="#17-SpringMVC-原理" class="headerlink" title="17.  SpringMVC 原理"></a>17.  <strong>SpringMVC 原理</strong></h4><ul><li>(1):客户端的所有请求都交给前端控制器DispatcherServlet来处理，</li><li>(2):DispatcherServlet收到请求后，将根据请求信息（URL，请求头，参数，等）以及HanderMapping的配置找到处理该请求的Controller</li><li>(3):Conroller调用业务逻辑处理后，返回ModelAndView</li><li>(4):DispatcherServlet查询一个或多个ViewResoler视图解析器，找到ModelAndView指定的视图。</li><li>(5):视图负责将结果显示到客户端<br>##总结<br>由于本人太过疏忽Java基础，些项目也遇到过很多坑，对于即将毕业的我面试过几家，都因基础太差而被淘汰，深感懊悔，特此写下这些！</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;strong&gt;Java基础很重要，他会让你在写项目的时候避免坑以及提高代码质量等等，本人忽视了这点，所以这次特也写篇博客牢固Java知识要点，好了，话不多说，开始吧！&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://hushao96.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://hushao96.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot2.x+SpringSecurit+JWT(三)前后端分离进阶</title>
    <link href="https://hushao96.github.io/2018/06/05/SpringBoot2-x-SpringSecurit-JWT-%E4%B8%89-%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E8%BF%9B%E9%98%B6/"/>
    <id>https://hushao96.github.io/2018/06/05/SpringBoot2-x-SpringSecurit-JWT-三-前后端分离进阶/</id>
    <published>2018-06-05T11:33:29.000Z</published>
    <updated>2018-06-07T04:01:55.555Z</updated>
    
    <content type="html"><![CDATA[<h4 id="此次文章是上一篇文章进阶片，以Token的方式进行验证，Token的生成策略是JWT，如有不懂请看上一篇文章SpringBoot2-x-SpringSecurit-二-前后端分离"><a href="#此次文章是上一篇文章进阶片，以Token的方式进行验证，Token的生成策略是JWT，如有不懂请看上一篇文章SpringBoot2-x-SpringSecurit-二-前后端分离" class="headerlink" title="此次文章是上一篇文章进阶片，以Token的方式进行验证，Token的生成策略是JWT，如有不懂请看上一篇文章SpringBoot2.x+SpringSecurit(二)前后端分离"></a>此次文章是上一篇文章进阶片，以Token的方式进行验证，Token的生成策略是JWT，如有不懂请看上一篇文章<a href="http://hugunshao.gitee.io/blog/2018/05/15/SpringBoot2-x-SpringSecurit-%E4%BA%8C-%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/" target="_blank" rel="noopener">SpringBoot2.x+SpringSecurit(二)前后端分离</a></h4><a id="more"></a><h3 id="什么是JWT-为什么使用JWT"><a href="#什么是JWT-为什么使用JWT" class="headerlink" title="什么是JWT,为什么使用JWT?"></a>什么是JWT,为什么使用JWT?</h3><ul><li>JWT是 Json Web Token 的缩写。它是基于 RFC 7519 标准定义的一种可以安全传输的小巧和 自包含的JSON对象。由于数据是使用数字签名的，所以是可信任的和安全的。JWT可以使用HMAC算法对secret进行加密或者使用RSA的公钥私钥对来进行签名。</li><li>使用 JWT 做权限验证，相比Session的优点是，Session 需要占用大量服务器内存，并且在多服务器时就会涉及到共享Session问题，而JWT无需存储在服务器,不占用服务器资源（也就是无状态的），用户在登录后拿到 Token 后，访问需要权限的请求时附上Token（一般设置在Http请求头）。</li></ul><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><ol><li>输入用户名、密码，进行登录</li><li>服务器验证登录鉴权，如果用户合法，根据用户的信息生成JWT Token</li><li>服务器将该token以json形式返回（不一定要json形式）</li><li>前端得到token，储存起来</li><li>以后用户请求API时，在请求的header中加入 Authorization:<br>Bearer xxxx(token)。此处 <strong>注意token之前有一个7长度字符的Bearer 。</strong> </li><li>服务器端对此token进行检验，如果合法就解析其中内容，根据其拥有的权限和自己的业务逻辑给出对应的响应结果。</li></ol><h2 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1. 引入依赖"></a>1. 引入依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//jwt</span><br><span class="line">compile &apos;io.jsonwebtoken:jjwt:0.9.0&apos;</span><br></pre></td></tr></table></figure><h2 id="2-Security-配置文件"><a href="#2-Security-配置文件" class="headerlink" title="2. Security 配置文件"></a>2. Security 配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableWebSecurity</span><br><span class="line">@EnableGlobalMethodSecurity(prePostEnabled=true)</span><br><span class="line">public class WebSecurityConfig extends WebSecurityConfigurerAdapter&#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private AuthSuccessHandler authSuccessHandler;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private AuthFailHandler authFailHandler;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private AuthAccessDeniedHandler authAccessDeniedHandler;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123;</span><br><span class="line">        auth.userDetailsService(userDetailsService).passwordEncoder(new BCryptPasswordEncoder());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">        ExpressionUrlAuthorizationConfigurer&lt;HttpSecurity&gt;.ExpressionInterceptUrlRegistry registry=http.authorizeRequests();</span><br><span class="line">        for (String u:PermitUrl.permitUrls) &#123;</span><br><span class="line">            registry.antMatchers(u).permitAll();</span><br><span class="line">        &#125;</span><br><span class="line">        registry.and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .loginPage(&quot;/u/noLogin&quot;)</span><br><span class="line">                .loginProcessingUrl(&quot;/login&quot;)</span><br><span class="line">                .permitAll()</span><br><span class="line">                //成功处理类</span><br><span class="line">                .successHandler(authSuccessHandler)</span><br><span class="line">                //失败处理类</span><br><span class="line">                .failureHandler(authFailHandler)</span><br><span class="line">                .and()</span><br><span class="line">                .logout()</span><br><span class="line">                .permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                //任何请求</span><br><span class="line">                .anyRequest()</span><br><span class="line">                //都需要认证</span><br><span class="line">                .authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                //关闭跨站请求防护</span><br><span class="line">                .csrf().disable()</span><br><span class="line">                //前后端分离采用JWT 不需要session</span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">                .and()</span><br><span class="line">                //自定义权限拒绝处理类</span><br><span class="line">                .exceptionHandling().accessDeniedHandler(authAccessDeniedHandler)</span><br><span class="line">                .and()</span><br><span class="line">                //添加JWT过滤器 除/login其它请求都需经过此过滤器</span><br><span class="line">                .addFilter(new JwtAuthenticationFilter(authenticationManager()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里不需要session储存了，以及重现验证机制</p><h2 id="3-成功配置文件"><a href="#3-成功配置文件" class="headerlink" title="3. 成功配置文件"></a>3. 成功配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">public class AuthSuccessHandler implements AuthenticationSuccessHandler &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException &#123;</span><br><span class="line">        //获取登陆成功用户名</span><br><span class="line">        String username = ((UserDetails)authentication.getPrincipal()).getUsername();</span><br><span class="line">        log.info(&quot;登陆成功:&#123;&#125;&quot;,username);</span><br><span class="line">        List&lt;String&gt; authorities=((UserDetails) authentication.getPrincipal()).getAuthorities().stream().map(a-&gt;new String(((GrantedAuthority) a).getAuthority())).collect(Collectors.toList());</span><br><span class="line">        //登陆成功生成JWT</span><br><span class="line">        String token = Jwts.builder()</span><br><span class="line">                //主题 放入用户名</span><br><span class="line">                .setSubject(username)</span><br><span class="line">                //自定义属性 放入用户拥有权限</span><br><span class="line">                .claim(SecurityConstant.AUTHORITIES.getCode(), JSONObject.toJSONString(authorities))</span><br><span class="line">                //失效时间 7天</span><br><span class="line">                .setExpiration(new Date(System.currentTimeMillis() + 60 * 60 * 24 *7))</span><br><span class="line">                //签名算法和密钥</span><br><span class="line">                .signWith(SignatureAlgorithm.HS512,SecurityConstant.JWT_SIGN_KEY.getCode())</span><br><span class="line">                .compact();</span><br><span class="line">        token = SecurityConstant.TOKEN_SPLIT.getCode() + token;</span><br><span class="line"></span><br><span class="line">        String msg=JSON.toJSONString(ServerResponse.Success(token));</span><br><span class="line">        ServerResponse.out(response,msg);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>登陆成功后获取用户信息，以及权限，以JWT的HS512算法生成Token 然后以json返回给前端。<br>注意:如果你是JDK1.8以上需要加入<code>compile &#39;javax.xml.bind:jaxb-api:2.3.0&#39;</code>依赖</p><h2 id="4-失败配置文件"><a href="#4-失败配置文件" class="headerlink" title="4. 失败配置文件"></a>4. 失败配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@Slf4j</span><br><span class="line">public class AuthFailHandler implements AuthenticationFailureHandler &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception) throws IOException, ServletException &#123;</span><br><span class="line">        String msg=null;</span><br><span class="line">        if (exception instanceof UsernameNotFoundException || exception instanceof BadCredentialsException) &#123;</span><br><span class="line">            msg=&quot;用户名或密码输入错误，登录失败!&quot;;</span><br><span class="line">        &#125; else if (exception instanceof DisabledException) &#123;</span><br><span class="line">           msg=&quot;账户被禁用，登录失败，请联系管理员!&quot;;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            msg=&quot;登录失败！&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        msg=JSON.toJSONString(ServerResponse.Error(ResponseCode.INTERNAL_SERVER_ERROR.getCode(),msg));</span><br><span class="line">        ServerResponse.out(response,msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-token校验类"><a href="#5-token校验类" class="headerlink" title="5. token校验类"></a>5. token校验类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">public class JwtAuthenticationFilter extends BasicAuthenticationFilter &#123;</span><br><span class="line"></span><br><span class="line">    public JwtAuthenticationFilter(AuthenticationManager authenticationManager) &#123;</span><br><span class="line">        super(authenticationManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException &#123;</span><br><span class="line">        String header = request.getHeader(SecurityConstant.HEADER.getCode());</span><br><span class="line">        if (header == null || !header.startsWith(SecurityConstant.TOKEN_SPLIT.getCode())) &#123;</span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        UsernamePasswordAuthenticationToken authentication = getAuthentication(request, response);</span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(authentication);</span><br><span class="line"></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private UsernamePasswordAuthenticationToken getAuthentication(HttpServletRequest request, HttpServletResponse response) &#123;</span><br><span class="line">        String token = request.getHeader(SecurityConstant.HEADER.getCode());</span><br><span class="line">        if (token!=null)&#123;</span><br><span class="line">            Claims claims = null;</span><br><span class="line">            try &#123;</span><br><span class="line">                claims=Jwts.parser()</span><br><span class="line">                        .setSigningKey(SecurityConstant.JWT_SIGN_KEY.getCode())</span><br><span class="line">                        .parseClaimsJws(token.replace(SecurityConstant.TOKEN_SPLIT.getCode(), &quot;&quot;))</span><br><span class="line">                        .getBody();</span><br><span class="line">                //获取用户名</span><br><span class="line">                String username = claims.getSubject();</span><br><span class="line"></span><br><span class="line">                //获取权限（角色）</span><br><span class="line">                List&lt;GrantedAuthority&gt; authorities=null;</span><br><span class="line">                String authority = claims.get(SecurityConstant.AUTHORITIES.getCode()).toString();</span><br><span class="line"></span><br><span class="line">                if(authority!=null)&#123;</span><br><span class="line">                    List&lt;String&gt; list = JSONObject.parseArray(authority,String.class);</span><br><span class="line">                    authorities= list.stream().map(a-&gt;new SimpleGrantedAuthority(a)).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                if(username!=null) &#123;</span><br><span class="line">                    //此处password不能为null</span><br><span class="line">                    User user=new User(username,&quot;&quot;,authorities);</span><br><span class="line">                    return new UsernamePasswordAuthenticationToken(user, null, authorities);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;catch (ExpiredJwtException e) &#123;</span><br><span class="line">                logger.error(&quot;Token已过期: &#123;&#125; &quot; + e);</span><br><span class="line">                String msg=JSON.toJSONString(ServerResponse.Error(ResponseCode.INTERNAL_SERVER_ERROR.getCode(),&quot;Token已过期&quot;));</span><br><span class="line">                ServerResponse.out(response,msg);</span><br><span class="line">            &#125; catch (UnsupportedJwtException e) &#123;</span><br><span class="line">                logger.error(&quot;Token格式错误: &#123;&#125; &quot; + e);</span><br><span class="line">                String msg=JSON.toJSONString(ServerResponse.Error(ResponseCode.INTERNAL_SERVER_ERROR.getCode(),&quot;Token格式错误&quot;));</span><br><span class="line">                ServerResponse.out(response,msg);</span><br><span class="line">            &#125; catch (MalformedJwtException e) &#123;</span><br><span class="line">                logger.error(&quot;Token没有被正确构造: &#123;&#125; &quot; + e);</span><br><span class="line">                String msg=JSON.toJSONString(ServerResponse.Error(ResponseCode.INTERNAL_SERVER_ERROR.getCode(),&quot;Token没有被正确构造&quot;));</span><br><span class="line">                ServerResponse.out(response,msg);</span><br><span class="line">            &#125; catch (SignatureException e) &#123;</span><br><span class="line">                logger.error(&quot;签名失败: &#123;&#125; &quot; + e);</span><br><span class="line">                String msg=JSON.toJSONString(ServerResponse.Error(ResponseCode.INTERNAL_SERVER_ERROR.getCode(),&quot;签名失败&quot;));</span><br><span class="line">                ServerResponse.out(response,msg);</span><br><span class="line">            &#125; catch (IllegalArgumentException e) &#123;</span><br><span class="line">                logger.error(&quot;非法参数异常: &#123;&#125; &quot; + e);</span><br><span class="line">                String msg=JSON.toJSONString(ServerResponse.Error(ResponseCode.INTERNAL_SERVER_ERROR.getCode(),&quot;非法参数异常&quot;));</span><br><span class="line">                ServerResponse.out(response,msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里判断请求的header格式是否正确，如正确，解析Token获取用户信息</p><h2 id="6-测试"><a href="#6-测试" class="headerlink" title="6. 测试"></a>6. 测试</h2><p><img src="https://gitee.com/uploads/images/2018/0605/121132_7c090cb8_1487485.png" alt="输入图片说明"><br><img src="https://gitee.com/uploads/images/2018/0605/121147_63f574bb_1487485.png" alt="输入图片说明"><br>如果访问其他API<br><img src="https://gitee.com/uploads/images/2018/0605/121426_2c1a79e4_1487485.png" alt="输入图片说明"><br>这里的值为你登录的Bearer +Token。</p><h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h2><p><strong> 源码请看：<a href="https://gitee.com/HuGunShao/aimiStore" target="_blank" rel="noopener">源码</a></strong><br>这里以JWT生成Token和储存Token，那么如何以redis储存呢？</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;此次文章是上一篇文章进阶片，以Token的方式进行验证，Token的生成策略是JWT，如有不懂请看上一篇文章SpringBoot2-x-SpringSecurit-二-前后端分离&quot;&gt;&lt;a href=&quot;#此次文章是上一篇文章进阶片，以Token的方式进行验证，Token的生成策略是JWT，如有不懂请看上一篇文章SpringBoot2-x-SpringSecurit-二-前后端分离&quot; class=&quot;headerlink&quot; title=&quot;此次文章是上一篇文章进阶片，以Token的方式进行验证，Token的生成策略是JWT，如有不懂请看上一篇文章SpringBoot2.x+SpringSecurit(二)前后端分离&quot;&gt;&lt;/a&gt;此次文章是上一篇文章进阶片，以Token的方式进行验证，Token的生成策略是JWT，如有不懂请看上一篇文章&lt;a href=&quot;http://hugunshao.gitee.io/blog/2018/05/15/SpringBoot2-x-SpringSecurit-%E4%BA%8C-%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SpringBoot2.x+SpringSecurit(二)前后端分离&lt;/a&gt;&lt;/h4&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="https://hushao96.github.io/categories/JavaWeb/"/>
    
    
      <category term="SpringBoot" scheme="https://hushao96.github.io/tags/SpringBoot/"/>
    
      <category term="SpringSecurity" scheme="https://hushao96.github.io/tags/SpringSecurity/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot2.x+SpringSecurit(二)前后端分离</title>
    <link href="https://hushao96.github.io/2018/05/15/SpringBoot2-x-SpringSecurit-%E4%BA%8C-%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/"/>
    <id>https://hushao96.github.io/2018/05/15/SpringBoot2-x-SpringSecurit-二-前后端分离/</id>
    <published>2018-05-15T10:25:03.000Z</published>
    <updated>2018-06-07T04:03:21.822Z</updated>
    
    <content type="html"><![CDATA[<h4 id="遇到前后端分离时SpringSecurity权限的处理和之前的也有点差异，本文讲述Spring-Boot2-x整合Spring-Security前后端分离，对上一篇的配置进行修改，如果不懂的先看上一篇文章SpringBoot2-x-SpringSecurity-一-安全配置整合"><a href="#遇到前后端分离时SpringSecurity权限的处理和之前的也有点差异，本文讲述Spring-Boot2-x整合Spring-Security前后端分离，对上一篇的配置进行修改，如果不懂的先看上一篇文章SpringBoot2-x-SpringSecurity-一-安全配置整合" class="headerlink" title="遇到前后端分离时SpringSecurity权限的处理和之前的也有点差异，本文讲述Spring Boot2.x整合Spring Security前后端分离，对上一篇的配置进行修改，如果不懂的先看上一篇文章SpringBoot2.x+SpringSecurity(一)安全配置整合"></a>遇到前后端分离时SpringSecurity权限的处理和之前的也有点差异，本文讲述Spring Boot2.x整合Spring Security前后端分离，对上一篇的配置进行修改，如果不懂的先看上一篇文章<a href="http://hugunshao.gitee.io/blog/2018/06/05/SpringBoot2.x-SpringSecurity-%E4%B8%80%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE%E6%95%B4%E5%90%88/" target="_blank" rel="noopener">SpringBoot2.x+SpringSecurity(一)安全配置整合</a></h4><a id="more"></a><h2 id="1-Spring-Securit配置"><a href="#1-Spring-Securit配置" class="headerlink" title="1. Spring Securit配置"></a>1. Spring Securit配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableWebSecurity</span><br><span class="line">@EnableGlobalMethodSecurity(prePostEnabled=true)</span><br><span class="line">public class WebSecurityConfig extends WebSecurityConfigurerAdapter&#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private AuthSuccessHandler authSuccessHandler;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private AuthFailHandler authFailHandler;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123;</span><br><span class="line">        auth.userDetailsService(userDetailsService).passwordEncoder(new BCryptPasswordEncoder());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">        ExpressionUrlAuthorizationConfigurer&lt;HttpSecurity&gt;.ExpressionInterceptUrlRegistry registry=http.authorizeRequests();</span><br><span class="line">        registry.and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .loginPage(&quot;/u/noLogin&quot;)</span><br><span class="line">                .loginProcessingUrl(&quot;/login&quot;)</span><br><span class="line">                .permitAll()</span><br><span class="line">                //成功处理类</span><br><span class="line">                .successHandler(authSuccessHandler)</span><br><span class="line">                //失败处理类</span><br><span class="line">                .failureHandler(authFailHandler)</span><br><span class="line">                .and()</span><br><span class="line">                .logout()</span><br><span class="line">                .permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                //任何请求</span><br><span class="line">                .anyRequest()</span><br><span class="line">                //都需要认证</span><br><span class="line">                .authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                //关闭跨站请求防护</span><br><span class="line">                .csrf().disable()</span><br><span class="line">                .and()</span><br><span class="line">                //自定义权限拒绝处理类</span><br><span class="line">                .exceptionHandling().accessDeniedHandler(authAccessDeniedHandler)</span><br><span class="line">               </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的successHandler(）以及failureHandler()就是当验证成功时以及失败时调用自己写的方法，.exceptionHandling().accessDeniedHandler(）依然也是一样的，因为我我们不用默认的了；</p><h2 id="2-成功处理类"><a href="#2-成功处理类" class="headerlink" title="2. 成功处理类"></a>2. 成功处理类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">public class AuthSuccessHandler implements AuthenticationSuccessHandler &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException &#123;</span><br><span class="line">      </span><br><span class="line">        log.info(&quot;登陆成功&quot;);</span><br><span class="line">        </span><br><span class="line">        String msg=JSON.toJSONString(ServerResponse.Success(authentication.getPrincipal()));</span><br><span class="line">        ServerResponse.out(response,msg);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当登录验证成功时由AuthenicationSuccessHandler策略接口控制，实现onAuthenticationSuccess方法，authentication.getPrincipal()是当前登录成功时的用户信息，以json返回给前端。</p><h2 id="3-失败处理类"><a href="#3-失败处理类" class="headerlink" title="3. 失败处理类"></a>3. 失败处理类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@Slf4j</span><br><span class="line">public class AuthFailHandler implements AuthenticationFailureHandler &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception) throws IOException, ServletException &#123;</span><br><span class="line">        String msg=null;</span><br><span class="line">        if (exception instanceof UsernameNotFoundException || exception instanceof BadCredentialsException) &#123;</span><br><span class="line">            msg=&quot;用户名或密码输入错误，登录失败!&quot;;</span><br><span class="line">        &#125; else if (exception instanceof DisabledException) &#123;</span><br><span class="line">           msg=&quot;账户被禁用，登录失败，请联系管理员!&quot;;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            msg=&quot;登录失败！&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        msg=JSON.toJSONString(ServerResponse.Error(ResponseCode.INTERNAL_SERVER_ERROR.getCode(),msg));</span><br><span class="line">        ServerResponse.out(response,msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当验证失败时由AuthenticationFailureHandlerc策略借口控制，实现 onAuthenticationFailure方法返回错误信息</p><h2 id="4-权限拒绝处理类"><a href="#4-权限拒绝处理类" class="headerlink" title="4. 权限拒绝处理类"></a>4. 权限拒绝处理类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">public class AuthAccessDeniedHandler implements AccessDeniedHandler &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void handle(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException) throws IOException, ServletException &#123;</span><br><span class="line">        log.error(&quot;权限不足！&quot;);</span><br><span class="line">        response.sendError(HttpServletResponse.SC_UNAUTHORIZED, &quot;权限不足！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-测试"><a href="#5-测试" class="headerlink" title="5. 测试"></a>5. 测试</h2><p><img src="https://gitee.com/uploads/images/2018/0605/112303_37c64e1a_1487485.png" alt="输入图片说明"><br>返回的结果：<img src="https://gitee.com/uploads/images/2018/0605/112428_dd0a9bf1_1487485.png" alt="输入图片说明"><br>data里就是当前验证成功的信息，status是自定义返回状态；</p><h2 id="6-小结"><a href="#6-小结" class="headerlink" title="6. 小结"></a>6. 小结</h2><p>在此继续研究下去！</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;遇到前后端分离时SpringSecurity权限的处理和之前的也有点差异，本文讲述Spring-Boot2-x整合Spring-Security前后端分离，对上一篇的配置进行修改，如果不懂的先看上一篇文章SpringBoot2-x-SpringSecurity-一-安全配置整合&quot;&gt;&lt;a href=&quot;#遇到前后端分离时SpringSecurity权限的处理和之前的也有点差异，本文讲述Spring-Boot2-x整合Spring-Security前后端分离，对上一篇的配置进行修改，如果不懂的先看上一篇文章SpringBoot2-x-SpringSecurity-一-安全配置整合&quot; class=&quot;headerlink&quot; title=&quot;遇到前后端分离时SpringSecurity权限的处理和之前的也有点差异，本文讲述Spring Boot2.x整合Spring Security前后端分离，对上一篇的配置进行修改，如果不懂的先看上一篇文章SpringBoot2.x+SpringSecurity(一)安全配置整合&quot;&gt;&lt;/a&gt;遇到前后端分离时SpringSecurity权限的处理和之前的也有点差异，本文讲述Spring Boot2.x整合Spring Security前后端分离，对上一篇的配置进行修改，如果不懂的先看上一篇文章&lt;a href=&quot;http://hugunshao.gitee.io/blog/2018/06/05/SpringBoot2.x-SpringSecurity-%E4%B8%80%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE%E6%95%B4%E5%90%88/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SpringBoot2.x+SpringSecurity(一)安全配置整合&lt;/a&gt;&lt;/h4&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="https://hushao96.github.io/categories/JavaWeb/"/>
    
    
      <category term="SpringBoot" scheme="https://hushao96.github.io/tags/SpringBoot/"/>
    
      <category term="SpringSecurity" scheme="https://hushao96.github.io/tags/SpringSecurity/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot2.x+SpringSecurity(一)安全配置整合</title>
    <link href="https://hushao96.github.io/2018/05/05/SpringBoot2.x-SpringSecurity-%E4%B8%80%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE%E6%95%B4%E5%90%88/"/>
    <id>https://hushao96.github.io/2018/05/05/SpringBoot2.x-SpringSecurity-一安全配置整合/</id>
    <published>2018-05-04T23:58:37.000Z</published>
    <updated>2018-06-07T04:03:03.983Z</updated>
    
    <content type="html"><![CDATA[<h4 id="首先我是一名大学生，最近了解到SpringSecurity-其功能非常强大，与SpringBoot完美整合，本文讲述Spring-Boot2-x整合Spring-Security在方法上使用注解实现权限控制，使用自定义UserDetailService，从MySQL中加载用户信息。使用Security推荐的BCrypt对用户的密码进行加密。页面模板采用thymeleaf引擎。"><a href="#首先我是一名大学生，最近了解到SpringSecurity-其功能非常强大，与SpringBoot完美整合，本文讲述Spring-Boot2-x整合Spring-Security在方法上使用注解实现权限控制，使用自定义UserDetailService，从MySQL中加载用户信息。使用Security推荐的BCrypt对用户的密码进行加密。页面模板采用thymeleaf引擎。" class="headerlink" title="首先我是一名大学生，最近了解到SpringSecurity,其功能非常强大，与SpringBoot完美整合，本文讲述Spring Boot2.x整合Spring Security在方法上使用注解实现权限控制，使用自定义UserDetailService，从MySQL中加载用户信息。使用Security推荐的BCrypt对用户的密码进行加密。页面模板采用thymeleaf引擎。"></a>首先我是一名大学生，最近了解到SpringSecurity,其功能非常强大，与SpringBoot完美整合，本文讲述Spring Boot2.x整合Spring Security在方法上使用注解实现权限控制，使用自定义UserDetailService，从MySQL中加载用户信息。使用Security推荐的BCrypt对用户的密码进行加密。页面模板采用thymeleaf引擎。</h4><a id="more"></a><h2 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1. 引入依赖"></a>1. 引入依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">compile(&apos;org.springframework.boot:spring-boot-starter-data-jpa&apos;)</span><br><span class="line">compile(&apos;org.springframework.boot:spring-boot-starter-security&apos;)</span><br><span class="line">compile(&apos;org.springframework.boot:spring-boot-starter-thymeleaf&apos;)</span><br><span class="line">compile(&apos;org.springframework.boot:spring-boot-starter-web&apos;)</span><br><span class="line">runtime(&apos;mysql:mysql-connector-java&apos;)</span><br><span class="line">compile &apos;com.alibaba:druid-spring-boot-starter:1.1.9&apos;</span><br></pre></td></tr></table></figure><p>这里使用druid连接池，Spring Data Jpa做数据访问</p><h2 id="2-Spring-Securit配置"><a href="#2-Spring-Securit配置" class="headerlink" title="2. Spring Securit配置"></a>2. Spring Securit配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @author 胡少</span><br><span class="line"> * 安全配置</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@EnableWebSecurity</span><br><span class="line">@EnableGlobalMethodSecurity(prePostEnabled = true)//开启Security注解</span><br><span class="line">public class SecurityConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class="line">    private static final String KEY=&quot;https://github.com/HuShao96&quot;;</span><br><span class="line">    @Autowired</span><br><span class="line">    private UserDetailsService userDetailsService;</span><br><span class="line">    @Autowired</span><br><span class="line">    private PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 自定义配置类</span><br><span class="line">     * @param http</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    protected void configure(HttpSecurity http)throws Exception&#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                //静态文件允许你访问</span><br><span class="line">                .antMatchers(&quot;/css/**&quot;,&quot;/js/**&quot;,&quot;/fonts/**&quot;).permitAll()</span><br><span class="line">                //所有的请求需要认证即登陆后才能访问</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                //form表单验证</span><br><span class="line">                .formLogin().loginPage(&quot;/login&quot;)</span><br><span class="line">                //设置默认登陆成功跳转的页面</span><br><span class="line">                .defaultSuccessUrl(&quot;/index&quot;)</span><br><span class="line">                //登陆失败的请求</span><br><span class="line">                .failureUrl(&quot;/login-error&quot;).permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                //开启cookie保存用户数据</span><br><span class="line">                .rememberMe()</span><br><span class="line">                //设置cookie有效期</span><br><span class="line">                .tokenValiditySeconds(60 * 60 * 24 * 7)</span><br><span class="line">                //设置cookie私钥</span><br><span class="line">                .key(KEY)</span><br><span class="line">                //处理异常，拒绝访问就重定向403页面</span><br><span class="line">                .and().exceptionHandling().accessDeniedPage(&quot;/403&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 认证信息</span><br><span class="line">     * @param auth</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    @Autowired</span><br><span class="line">    public void configureGlobal(AuthenticationManagerBuilder auth)throws Exception&#123;</span><br><span class="line">        auth.userDetailsService(userDetailsService)</span><br><span class="line">            //使用BCrypt加密</span><br><span class="line">            .passwordEncoder(new BCryptPasswordEncoder());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里做的配置有：</p><ol><li>设置了登录url、登录成功和失败跳转的url以及异常跳转的url。 </li><li>开启cookie保存用户数据并设置有效期以及私钥，这样前台页面提供name=”remember-me”的checkbox就可实现。</li><li>使用@EnableGlobalMethodSecurity(prePostEnabled = true)这个注解，可以开启security的注解，我们可以在需要控制权限的方法上面使用@PreAuthorize，@PreFilter这些注解。</li></ol><h2 id="3-自定义userDetailService"><a href="#3-自定义userDetailService" class="headerlink" title="3. 自定义userDetailService"></a>3. 自定义userDetailService</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class UserDetailsServiceImpl implements UserDetailsService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private RoleRepository roleRepository;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException &#123;</span><br><span class="line">        AimiUser user=userRepository.findByUsername(username);</span><br><span class="line">        if(user!=null)&#123;</span><br><span class="line">            //获取权限，如果用户实体类实现了UserDetails接口的不需要此操作</span><br><span class="line">            List&lt;Role&gt; roles=roleRepository.listRoleByUser(user.getId());</span><br><span class="line"></span><br><span class="line">            return new SecurityUserDetails(user,roles);</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里只需要实现UserDetailsService 接口，重写loadUserByUsername方法，从数据库中取出用户信息，并根据信息获取权限，最后返回一个UserDetails 实现类。</p><h2 id="4-定义UserDetails实体"><a href="#4-定义UserDetails实体" class="headerlink" title="4. 定义UserDetails实体"></a>4. 定义UserDetails实体</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">public class SecurityUserDetails implements UserDetails &#123;</span><br><span class="line"></span><br><span class="line">    private String username;</span><br><span class="line">    private String password;</span><br><span class="line">    private List&lt;Role&gt; roles;</span><br><span class="line"></span><br><span class="line">    public SecurityUserDetails(AimiUser user, List&lt;Role&gt; roles) &#123;</span><br><span class="line">        this.username = user.getUsername();</span><br><span class="line">        this.password = user.getPassword();</span><br><span class="line">        this.roles = roles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        List&lt;GrantedAuthority&gt; authorities=new ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Role&gt; roles=this.roles;</span><br><span class="line">        for(Role role:roles)&#123;</span><br><span class="line">            authorities.add(new SimpleGrantedAuthority(role.getName()));</span><br><span class="line">        &#125;</span><br><span class="line">        return authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getPassword() &#123;</span><br><span class="line">        return password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getUsername() &#123;</span><br><span class="line">        return username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 是否过期</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public boolean isAccountNonExpired() &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 是否被锁定</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public boolean isAccountNonLocked() &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 是否过期</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean isCredentialsNonExpired() &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 是否可用</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean isEnabled() &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-定义Controller控制器"><a href="#5-定义Controller控制器" class="headerlink" title="5. 定义Controller控制器"></a>5. 定义Controller控制器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class TestController &#123;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/index&quot;)</span><br><span class="line">    public String index() &#123;</span><br><span class="line">        return &quot;index&quot;;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @PreAuthorize(&quot;hasRole(&apos;admin&apos;)&quot;)</span><br><span class="line">    @GetMapping(&quot;/admin&quot;)</span><br><span class="line">    public String admin()&#123;</span><br><span class="line">        return &quot;admin&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/login&quot;)</span><br><span class="line">    public String login()&#123;</span><br><span class="line">        return &quot;login&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/&quot;)</span><br><span class="line">    public String root() &#123;</span><br><span class="line">        return &quot;index&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">     * 登陆失败</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @GetMapping(&quot;/login-error&quot;)</span><br><span class="line">    public String loginError(Model model)&#123;</span><br><span class="line">        model.addAttribute(&quot;loginError&quot;,true);</span><br><span class="line">        model.addAttribute(&quot;errorMsg&quot;,&quot;登陆失败！&quot;);</span><br><span class="line">        return &quot;login&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/403&quot;)</span><br><span class="line">    public String error(Model model)&#123;</span><br><span class="line">        model.addAttribute(&quot;error&quot;,&quot;权限不够&quot;);</span><br><span class="line">        return &quot;403&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在admin()方法上面使用了@PreAuthorize(“hasRole(‘admin’)”)，表示访问这个方法需要拥有admin角色。如果想某指定某个角色能访问@PreAuthorize(“hasAnyRole(‘admin’,’user’)”)，更多的使用方法可以去看官方文档。 <strong>需要注意的是，Spring Security默认的角色前缀是”ROLE_”,使用hasRole方法时已经默认加上了，因此我们在数据库里面的用户角色应该是“ROLE_admin”，在admin前面加上”ROLE_”前缀 。</strong></p><h2 id="6-前台登录页面"><a href="#6-前台登录页面" class="headerlink" title="6. 前台登录页面"></a>6. 前台登录页面</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;row&quot; style=&quot;  margin-top: 12%;&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;col-md-5 mx-auto&quot;&gt;</span><br><span class="line">            &lt;form class=&quot;form-horizontal&quot; th:action=&quot;@&#123;/login&#125;&quot; method=&quot;post&quot;&gt;</span><br><span class="line">                &lt;span class=&quot;heading&quot;&gt;登录&lt;/span&gt;</span><br><span class="line">                &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">                    &lt;input type=&quot;text&quot; class=&quot;form-control&quot; name=&quot;username&quot; id=&quot;username&quot;  placeholder=&quot;用户名&quot;&gt;</span><br><span class="line">                    &lt;i class=&quot;fa fa-user&quot;&gt;&lt;/i&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">                    &lt;input type=&quot;password&quot; class=&quot;form-control&quot; name=&quot;password&quot; id=&quot;password&quot; placeholder=&quot;密　码&quot;&gt;</span><br><span class="line">                    &lt;i class=&quot;fa fa-lock&quot;&gt;&lt;/i&gt;</span><br><span class="line">                    &lt;a href=&quot;#&quot; class=&quot;fa fa-question-circle&quot;&gt;&lt;/a&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;custom-control custom-checkbox&quot;&gt;</span><br><span class="line">                        &lt;input class=&quot;custom-control-input&quot; name=&quot;remember-me&quot; id=&quot;same-address&quot; type=&quot;checkbox&quot;&gt;</span><br><span class="line">                        &lt;label class=&quot;custom-control-label &quot; for=&quot;same-address&quot;&gt;记住我&lt;/label&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary float-right&quot;&gt;登录&lt;/button&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;text-danger text-center&quot; th:if=&quot;$&#123;loginError&#125;&quot; th:text=&quot;$&#123;errorMsg&#125;&quot; &gt;&lt;/div&gt;</span><br><span class="line">            &lt;/form&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p> <strong>注意:这里的input里的name=username，name=password，name=remember-me 以及post登录方法:”/login”都是固定的如要更改，Security配置文件也需要配置</strong> </p><h2 id="7-附加"><a href="#7-附加" class="headerlink" title="7. 附加"></a>7. 附加</h2><h4 id="如果访问除Get以外的方法可以会包403错误，原因是-框架内部防止CSRF（Cross-site-request-forgery跨站请求伪造）的发生，限制了除了get以外的大多数方法，解决办法如下："><a href="#如果访问除Get以外的方法可以会包403错误，原因是-框架内部防止CSRF（Cross-site-request-forgery跨站请求伪造）的发生，限制了除了get以外的大多数方法，解决办法如下：" class="headerlink" title="如果访问除Get以外的方法可以会包403错误，原因是:框架内部防止CSRF（Cross-site request forgery跨站请求伪造）的发生，限制了除了get以外的大多数方法，解决办法如下："></a>如果访问除Get以外的方法可以会包403错误，原因是:框架内部防止CSRF（Cross-site request forgery跨站请求伪造）的发生，限制了除了get以外的大多数方法，解决办法如下：</h4><ol><li>首先在标签内添加如下内容<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;_csrf&quot; th:content=&quot;$&#123;_csrf.token&#125;&quot;/&gt;</span><br><span class="line"> &lt;meta name=&quot;_csrf_hader&quot; th:content=&quot;$&#123;_csrf.headerName&#125;&quot;/&gt;</span><br></pre></td></tr></table></figure></li></ol><p>２. 然后在在ajax中添加代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> var token = $(&apos;meta[name=&quot;_csrf&quot;]&apos;).attr(&quot;content&quot;);</span><br><span class="line"> var header = $(&apos;meta[name=&quot;_csrf_hader&quot;]&apos;).attr(&quot;content&quot;);</span><br><span class="line">//接着在header请求头添加name=header,value=token;</span><br></pre></td></tr></table></figure><h2 id="８-总结"><a href="#８-总结" class="headerlink" title="８. 总结"></a>８. 总结</h2><p>Spring Boot整合Spring Security大大简化了配置，使整个项目更安全！好了我要讲的到此为止！</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;首先我是一名大学生，最近了解到SpringSecurity-其功能非常强大，与SpringBoot完美整合，本文讲述Spring-Boot2-x整合Spring-Security在方法上使用注解实现权限控制，使用自定义UserDetailService，从MySQL中加载用户信息。使用Security推荐的BCrypt对用户的密码进行加密。页面模板采用thymeleaf引擎。&quot;&gt;&lt;a href=&quot;#首先我是一名大学生，最近了解到SpringSecurity-其功能非常强大，与SpringBoot完美整合，本文讲述Spring-Boot2-x整合Spring-Security在方法上使用注解实现权限控制，使用自定义UserDetailService，从MySQL中加载用户信息。使用Security推荐的BCrypt对用户的密码进行加密。页面模板采用thymeleaf引擎。&quot; class=&quot;headerlink&quot; title=&quot;首先我是一名大学生，最近了解到SpringSecurity,其功能非常强大，与SpringBoot完美整合，本文讲述Spring Boot2.x整合Spring Security在方法上使用注解实现权限控制，使用自定义UserDetailService，从MySQL中加载用户信息。使用Security推荐的BCrypt对用户的密码进行加密。页面模板采用thymeleaf引擎。&quot;&gt;&lt;/a&gt;首先我是一名大学生，最近了解到SpringSecurity,其功能非常强大，与SpringBoot完美整合，本文讲述Spring Boot2.x整合Spring Security在方法上使用注解实现权限控制，使用自定义UserDetailService，从MySQL中加载用户信息。使用Security推荐的BCrypt对用户的密码进行加密。页面模板采用thymeleaf引擎。&lt;/h4&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="https://hushao96.github.io/categories/JavaWeb/"/>
    
    
      <category term="SpringBoot" scheme="https://hushao96.github.io/tags/SpringBoot/"/>
    
      <category term="SpringSecurity" scheme="https://hushao96.github.io/tags/SpringSecurity/"/>
    
  </entry>
  
</feed>
